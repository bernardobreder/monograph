/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package breder.compiler.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int JAVA_DOC_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int STRING = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int PACKAGE = 14;
  /** RegularExpression Id. */
  int CLASS = 15;
  /** RegularExpression Id. */
  int ENUM = 16;
  /** RegularExpression Id. */
  int INTERFACE = 17;
  /** RegularExpression Id. */
  int IMPORT = 18;
  /** RegularExpression Id. */
  int FINAL = 19;
  /** RegularExpression Id. */
  int VOID = 20;
  /** RegularExpression Id. */
  int STATIC = 21;
  /** RegularExpression Id. */
  int BREAK = 22;
  /** RegularExpression Id. */
  int CONTINUE = 23;
  /** RegularExpression Id. */
  int NATIVE = 24;
  /** RegularExpression Id. */
  int ABSTRACT = 25;
  /** RegularExpression Id. */
  int NOTNULL = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int WHILE = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int TO = 30;
  /** RegularExpression Id. */
  int TRY = 31;
  /** RegularExpression Id. */
  int CATCH = 32;
  /** RegularExpression Id. */
  int NEW = 33;
  /** RegularExpression Id. */
  int RETURN = 34;
  /** RegularExpression Id. */
  int ELSEIF = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int THIS = 37;
  /** RegularExpression Id. */
  int SUPER = 38;
  /** RegularExpression Id. */
  int EXTENDS = 39;
  /** RegularExpression Id. */
  int IMPLEMENTS = 40;
  /** RegularExpression Id. */
  int PUBLIC = 41;
  /** RegularExpression Id. */
  int PROTECTED = 42;
  /** RegularExpression Id. */
  int PRIVATE = 43;
  /** RegularExpression Id. */
  int OR = 44;
  /** RegularExpression Id. */
  int AND = 45;
  /** RegularExpression Id. */
  int NULL = 46;
  /** RegularExpression Id. */
  int REPEAT = 47;
  /** RegularExpression Id. */
  int THROW = 48;
  /** RegularExpression Id. */
  int THROWS = 49;
  /** RegularExpression Id. */
  int PROPERTY = 50;
  /** RegularExpression Id. */
  int SUM = 51;
  /** RegularExpression Id. */
  int SUB = 52;
  /** RegularExpression Id. */
  int MUL = 53;
  /** RegularExpression Id. */
  int DIV = 54;
  /** RegularExpression Id. */
  int LPARAM = 55;
  /** RegularExpression Id. */
  int RPARAM = 56;
  /** RegularExpression Id. */
  int LBLOCK = 57;
  /** RegularExpression Id. */
  int RBLOCK = 58;
  /** RegularExpression Id. */
  int LARRAY = 59;
  /** RegularExpression Id. */
  int RARRAY = 60;
  /** RegularExpression Id. */
  int EQUAL = 61;
  /** RegularExpression Id. */
  int DOT = 62;
  /** RegularExpression Id. */
  int NOT = 63;
  /** RegularExpression Id. */
  int HIGH = 64;
  /** RegularExpression Id. */
  int LOW = 65;
  /** RegularExpression Id. */
  int SEMICOMMA = 66;
  /** RegularExpression Id. */
  int COMMA = 67;
  /** RegularExpression Id. */
  int CONSTANT = 68;
  /** RegularExpression Id. */
  int NATURAL = 69;
  /** RegularExpression Id. */
  int ID = 70;
  /** RegularExpression Id. */
  int DIGIT = 71;
  /** RegularExpression Id. */
  int ZDIGIT = 72;
  /** RegularExpression Id. */
  int LETTER = 73;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVA_DOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "<STRING>",
    "<BOOLEAN>",
    "\"package\"",
    "\"class\"",
    "\"enum\"",
    "\"interface\"",
    "\"import\"",
    "\"final\"",
    "\"void\"",
    "\"static\"",
    "\"break\"",
    "\"continue\"",
    "\"native\"",
    "\"abstract\"",
    "\"notnull\"",
    "\"if\"",
    "\"while\"",
    "\"for\"",
    "\"to\"",
    "\"try\"",
    "\"catch\"",
    "\"new\"",
    "\"return\"",
    "\"elseif\"",
    "\"else\"",
    "\"this\"",
    "\"super\"",
    "\"extends\"",
    "\"implements\"",
    "\"public\"",
    "\"protected\"",
    "\"private\"",
    "\"or\"",
    "\"and\"",
    "\"null\"",
    "\"repeat\"",
    "\"throw\"",
    "\"throws\"",
    "\"property\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\".\"",
    "\"!\"",
    "\">\"",
    "\"<\"",
    "\";\"",
    "\",\"",
    "<CONSTANT>",
    "<NATURAL>",
    "<ID>",
    "<DIGIT>",
    "<ZDIGIT>",
    "<LETTER>",
  };

}
