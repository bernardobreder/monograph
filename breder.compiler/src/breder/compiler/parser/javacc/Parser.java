/* Generated By:JavaCC: Do not edit this line. Parser.java */
package breder.compiler.parser.javacc;
import java.util.*;
import java.io.*;
import breder.compiler.node.standart.*;
import breder.compiler.node.*;
import breder.compiler.node.comment.*;
import breder.compiler.node.command.*;
import breder.compiler.node.lvalue.*;
import breder.compiler.node.rvalue.*;
import breder.compiler.compiler.*;
import breder.compiler.compiler.Compiler;
import breder.compiler.util.*;

public class Parser implements ParserConstants {
  public AbstractCompiler compiler;

  public BSource s;

  public BClass cl;

  public BEnum e;

  public BMethod m;

  public BType tp = null;

  public Token t = null;

  public Block b = null;

  public BParam p = null;

  public ICommand c = null;

  public Declare d = null;

  public BAccess a = null;

  public List < Token > tokens = new LightArrayList < Token > ();

  public Parser(AbstractCompiler compiler, String classname, InputStream input)
  {
    this (input);
    this.compiler = compiler;
    this.s = new BSource(compiler, classname);
    this.cl = new BClass(s);
  }

  final public BSource init() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      t = ids();
      s.setPackageToken(t);
      jj_consume_token(SEMICOMMA);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      t = importDef();
      s.addImport(t);
    }
    if (jj_2_1(2147483647)) {
      classDef();
    } else {
      switch (jj_nt.kind) {
      case PUBLIC:
        interfaceDef();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void classDef() throws ParseException {
    jj_consume_token(PUBLIC);
    cl.setAccess(BAccess.PUBLIC);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case FINAL:
      case ABSTRACT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch (jj_nt.kind) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
      cl.setAbstract(true);
        break;
      case FINAL:
        jj_consume_token(FINAL);
      cl.setFinal(true);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLASS);
    t = jj_consume_token(ID);
    cl.setName(t);
    s.setStruct(cl);
    switch (jj_nt.kind) {
    case LOW:
      jj_consume_token(LOW);
      //  <DOT>
            //  <DOT>
            //  <DOT>
            //|		
            t = jj_consume_token(ID);
      switch (jj_nt.kind) {
      case ID:
        tp = typeDef();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
        cl.addGeneric(t, tp);
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ID);
        switch (jj_nt.kind) {
        case ID:
          tp = typeDef();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
          cl.addGeneric(t, tp);
      }
      jj_consume_token(HIGH);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      tp = typeDef();
      cl.addExtends(tp);
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        cl.addExtends(tp);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      tp = typeDef();
      cl.addImplements(tp);
      label_5:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        cl.addImplements(tp);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(LBLOCK);
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      if (jj_2_2(2147483647)) {
        propertyDef();
      } else if (jj_2_3(2147483647)) {
        fieldDef();
      } else if (jj_2_4(2147483647)) {
        constructorDef(cl);
      } else {
        switch (jj_nt.kind) {
        case PUBLIC:
        case PROTECTED:
        case PRIVATE:
          methodDef(cl);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBLOCK);
  }

  final public void enumDef() throws ParseException {
    jj_consume_token(PUBLIC);
    e.setAccess(BAccess.PUBLIC);
    jj_consume_token(ENUM);
    t = jj_consume_token(ID);
    e.setName(t);
    s.setStruct(cl);
    jj_consume_token(LBLOCK);
    jj_consume_token(ID);
    jj_consume_token(LPARAM);
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case LBLOCK:
      jj_consume_token(LBLOCK);
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case PUBLIC:
        case PROTECTED:
        case PRIVATE:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        if (jj_2_5(2147483647)) {
          propertyDef();
        } else if (jj_2_6(2147483647)) {
          fieldDef();
        } else {
          switch (jj_nt.kind) {
          case PUBLIC:
          case PROTECTED:
          case PRIVATE:
            methodDef(cl);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RBLOCK);
      break;
    case SEMICOMMA:
      jj_consume_token(SEMICOMMA);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBLOCK);
  }

  final public void interfaceDef() throws ParseException {
  BInterface i = new BInterface(s);
    jj_consume_token(PUBLIC);
    i.setAccess(BAccess.PUBLIC);
    jj_consume_token(INTERFACE);
    t = jj_consume_token(ID);
    i.setName(t);
    switch (jj_nt.kind) {
    case LOW:
      jj_consume_token(LOW);
      t = jj_consume_token(ID);
      switch (jj_nt.kind) {
      case ID:
        tp = typeDef();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      i.addGeneric(t, tp);
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ID);
        switch (jj_nt.kind) {
        case ID:
          tp = typeDef();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        i.addGeneric(t, tp);
      }
      jj_consume_token(HIGH);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      tp = typeDef();
      i.addExtends(tp);
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        i.addExtends(tp);
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(LBLOCK);
    label_10:
    while (true) {
      switch (jj_nt.kind) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      if (jj_2_7(2147483647)) {
        constructorInterfaceDef(i);
      } else {
        switch (jj_nt.kind) {
        case PUBLIC:
          methodInterfaceDef(i);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBLOCK);
  }

  final public void propertyDef() throws ParseException {
  BProperty field = new BProperty();
  Token nnt = null;
    a = access();
    field.setAccess(a);
    switch (jj_nt.kind) {
    case STATIC:
      jj_consume_token(STATIC);
      field.setStatic(true);
      compiler.addStaticField(field);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(PROPERTY);
    switch (jj_nt.kind) {
    case NOTNULL:
      nnt = jj_consume_token(NOTNULL);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    tp = typeDef();
    tp.setNotNull(nnt != null);
    field.setType(tp);
    t = jj_consume_token(ID);
    field.setName(t);
    jj_consume_token(SEMICOMMA);
    cl.addField(field);
  }

  final public void fieldDef() throws ParseException {
  BField field = new BField();
  Token nnt = null;
    a = access();
    field.setAccess(a);
    switch (jj_nt.kind) {
    case STATIC:
      jj_consume_token(STATIC);
      field.setStatic(true);
      compiler.addStaticField(field);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case NOTNULL:
      nnt = jj_consume_token(NOTNULL);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    tp = typeDef();
    tp.setNotNull(nnt != null);
    field.setType(tp);
    t = jj_consume_token(ID);
    field.setName(t);
    jj_consume_token(SEMICOMMA);
    cl.addField(field);
  }

  final public void methodDef(BStruct s) throws ParseException {
  BParam p;
  m = new BMethod(s);
  Token nnt = null;
  Token rt = null;
    a = access();
    m.setAccess(a);
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case FINAL:
      case STATIC:
      case NATIVE:
      case ABSTRACT:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      switch (jj_nt.kind) {
      case STATIC:
        jj_consume_token(STATIC);
      m.setStatic(true);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
      m.setNative(true);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
      m.setAbstract(true);
        break;
      case FINAL:
        jj_consume_token(FINAL);
      m.setFinal(true);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_8(2147483647)) {
      switch (jj_nt.kind) {
      case NOTNULL:
        nnt = jj_consume_token(NOTNULL);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      rt = jj_consume_token(THIS);
      m.getReturns().add(new BThisType(rt, nnt));
    } else {
      switch (jj_nt.kind) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case NOTNULL:
      case ID:
        switch (jj_nt.kind) {
        case NOTNULL:
          nnt = jj_consume_token(NOTNULL);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        tp = typeDef();
      tp.setNotNull(nnt != null);
      m.getReturns().add(tp);
        label_12:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          switch (jj_nt.kind) {
          case NOTNULL:
            nnt = jj_consume_token(NOTNULL);
            break;
          default:
            jj_la1[35] = jj_gen;
            ;
          }
          tp = typeDef();
        tp.setNotNull(nnt != null);
        m.getReturns().add(tp);
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(ID);
    m.setName(t);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case NOTNULL:
    case ID:
      p = paramDef();
      m.getParams().add(p);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        p = paramDef();
        m.getParams().add(p);
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      tp = typeDef();
      m.addThrows(tp);
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        m.addThrows(tp);
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    if (!m.isNative() && !m.isAbstract()) {
      b = blockDef();
      m.setBlock(b);
    } else {
      switch (jj_nt.kind) {
      case SEMICOMMA:
        jj_consume_token(SEMICOMMA);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    cl.addMethod(m);
  }

  final public void constructorInterfaceDef(BStruct s) throws ParseException {
  BParam p;
  m = new BConstructor(s);
  Token nnt = null;
    jj_consume_token(PUBLIC);
    m.setAccess(BAccess.PUBLIC);
    t = jj_consume_token(ID);
    m.setName(t);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case NOTNULL:
    case ID:
      p = paramDef();
      m.getParams().add(p);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        p = paramDef();
        m.getParams().add(p);
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      tp = typeDef();
      m.addThrows(tp);
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        m.addThrows(tp);
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOMMA);
    s.addMethod(m);
  }

  final public void methodInterfaceDef(BStruct s) throws ParseException {
  BParam p;
  m = new BMethod(s);
  Token nnt = null;
  Token rt = null;
    jj_consume_token(PUBLIC);
    m.setAccess(BAccess.PUBLIC);
    if (jj_2_9(2147483647)) {
      switch (jj_nt.kind) {
      case NOTNULL:
        nnt = jj_consume_token(NOTNULL);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      rt = jj_consume_token(THIS);
      m.getReturns().add(new BThisType(rt, nnt));
    } else {
      switch (jj_nt.kind) {
      case VOID:
        rt = jj_consume_token(VOID);
        break;
      case NOTNULL:
      case ID:
        switch (jj_nt.kind) {
        case NOTNULL:
          nnt = jj_consume_token(NOTNULL);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        tp = typeDef();
      tp.setNotNull(nnt != null);
      m.getReturns().add(tp);
        label_17:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          switch (jj_nt.kind) {
          case NOTNULL:
            nnt = jj_consume_token(NOTNULL);
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          tp = typeDef();
        tp.setNotNull(nnt != null);
        m.getReturns().add(tp);
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(ID);
    m.setName(t);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case NOTNULL:
    case ID:
      p = paramDef();
      m.getParams().add(p);
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        p = paramDef();
        m.getParams().add(p);
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      tp = typeDef();
      m.addThrows(tp);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        m.addThrows(tp);
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOMMA);
    s.addMethod(m);
  }

  final public void constructorDef(BStruct s) throws ParseException {
  m = new BConstructor(s);
    a = access();
    m.setAccess(a);
    label_20:
    while (true) {
      switch (jj_nt.kind) {
      case NATIVE:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_20;
      }
      jj_consume_token(NATIVE);
      m.setNative(true);
    }
    t = jj_consume_token(ID);
    m.setName(t);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case NOTNULL:
    case ID:
      paramsDef(m.getParams());
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      tp = typeDef();
      m.addThrows(tp);
      label_21:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        tp = typeDef();
        m.addThrows(tp);
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    if (!m.isNative()) {
      b = blockDef();
      m.setBlock(b);
    } else {
      switch (jj_nt.kind) {
      case SEMICOMMA:
        jj_consume_token(SEMICOMMA);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    cl.addMethod(m);
  }

  final public void paramsDef(List < BParam > ps) throws ParseException {
    p = paramDef();
    ps.add(p);
    label_22:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      p = paramDef();
      ps.add(p);
    }
  }

  final public BParam paramDef() throws ParseException {
  Token t, nnt = null;
  p = new BParam();
    switch (jj_nt.kind) {
    case NOTNULL:
      nnt = jj_consume_token(NOTNULL);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    tp = typeDef();
    tp.setNotNull(nnt != null);
    p.setType(tp);
    t = jj_consume_token(ID);
    p.setName(t);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public BType typeDef() throws ParseException {
  Token t, nnt = null;
  BType tp1, tp2;
    t = ids();
    tp1 = new BType(t);
    switch (jj_nt.kind) {
    case LOW:
      jj_consume_token(LOW);
      tp2 = typeDef();
      tp1.addGeneric(tp2);
      label_23:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        tp2 = typeDef();
        tp1.addGeneric(tp2);
      }
      jj_consume_token(HIGH);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    {if (true) return tp1;}
    throw new Error("Missing return statement in function");
  }

  final public Block blockDef() throws ParseException {
  Block b = new Block();
  Token t;
    m.pushBlock(b);
    jj_consume_token(LBLOCK);
    label_24:
    while (true) {
      switch (jj_nt.kind) {
      case STRING:
      case BOOLEAN:
      case BREAK:
      case CONTINUE:
      case NOTNULL:
      case IF:
      case WHILE:
      case FOR:
      case TRY:
      case NEW:
      case RETURN:
      case THIS:
      case SUPER:
      case NULL:
      case REPEAT:
      case THROW:
      case SUB:
      case LPARAM:
      case LBLOCK:
      case NOT:
      case CONSTANT:
      case ID:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_24;
      }
      c = commandDef();
        b.getCommands().add(c);
    }
    jj_consume_token(RBLOCK);
    m.popBlock();
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public ICommand commandDef() throws ParseException {
    if (jj_2_10(2147483647)) {
      c = declareDef();
      jj_consume_token(SEMICOMMA);
    } else if (jj_2_11(2147483647)) {
      c = assignLDef();
      jj_consume_token(SEMICOMMA);
    } else {
      switch (jj_nt.kind) {
      case IF:
        c = ifDef();
        break;
      case WHILE:
        c = whileDef();
        break;
      case REPEAT:
        c = repeatDef();
        break;
      case FOR:
        c = forDef();
        break;
      case TRY:
        c = tryDef();
        break;
      case THROW:
        c = throwDef();
        jj_consume_token(SEMICOMMA);
        break;
      case RETURN:
        c = returnDef();
        jj_consume_token(SEMICOMMA);
        break;
      default:
        jj_la1[65] = jj_gen;
        if (jj_2_12(2147483647)) {
          c = superDef();
          jj_consume_token(SEMICOMMA);
        } else {
          switch (jj_nt.kind) {
          case BREAK:
            c = breakDef();
            jj_consume_token(SEMICOMMA);
            break;
          case CONTINUE:
            c = continueDef();
            jj_consume_token(SEMICOMMA);
            break;
          case LBLOCK:
            c = blockDef();
            break;
          case STRING:
          case BOOLEAN:
          case NEW:
          case THIS:
          case SUPER:
          case NULL:
          case SUB:
          case LPARAM:
          case NOT:
          case CONSTANT:
          case ID:
            c = expDef();
            jj_consume_token(SEMICOMMA);
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Declare declareDef() throws ParseException {
  Declare c = new Declare();
  VariableDeclare vd;
    p = paramDef();
    vd = new VariableDeclare(p.getType(), p.getName());
    c.addDeclare(vd);
    this.m.addDeclare(vd);
    label_25:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      p = paramDef();
      vd = new VariableDeclare(p.getType(), p.getName());
      c.addDeclare(vd);
      this.m.addDeclare(vd);
    }
    switch (jj_nt.kind) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
      c.setEqualToken(t);
      rvalues(c.getValues());
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Assign assignLDef() throws ParseException {
  Assign c = new Assign();
  ILValue l1;
    l1 = lvalue();
    c.getLValues().add(l1);
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      l1 = lvalue();
      c.getLValues().add(l1);
    }
    switch (jj_nt.kind) {
    case SUM:
    case SUB:
    case MUL:
    case DIV:
      switch (jj_nt.kind) {
      case SUM:
        jj_consume_token(SUM);
      c.setType(Assign.AssignType.SUM);
        break;
      case SUB:
        jj_consume_token(SUB);
      c.setType(Assign.AssignType.SUB);
        break;
      case MUL:
        jj_consume_token(MUL);
      c.setType(Assign.AssignType.MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
      c.setType(Assign.AssignType.DIV);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    t = jj_consume_token(EQUAL);
      c.setToken(t);
    rvalues(c.getRValues());
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public RAssign assignRDef() throws ParseException {
  RAssign c = new RAssign();
  ILValue l1;
    l1 = lvalue();
    c.getLValues().add(l1);
    label_27:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      l1 = lvalue();
      c.getLValues().add(l1);
    }
    switch (jj_nt.kind) {
    case SUM:
    case SUB:
    case MUL:
    case DIV:
      switch (jj_nt.kind) {
      case SUM:
        jj_consume_token(SUM);
      c.setType(Assign.AssignType.SUM);
        break;
      case SUB:
        jj_consume_token(SUB);
      c.setType(Assign.AssignType.SUB);
        break;
      case MUL:
        jj_consume_token(MUL);
      c.setType(Assign.AssignType.MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
      c.setType(Assign.AssignType.DIV);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    t = jj_consume_token(EQUAL);
      c.setToken(t);
    rvalues(c.getRValues());
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public If ifDef() throws ParseException {
  If c = new If();
  IRValue r1;
    jj_consume_token(IF);
    jj_consume_token(LPARAM);
    r1 = rvalue();
    jj_consume_token(RPARAM);
    c.setCondition(r1);
    b = blockDef();
    c.setTrueBlock(b);
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_28;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(LPARAM);
      r1 = rvalue();
      jj_consume_token(RPARAM);
      c.getOtherConditions().add(r1);
      b = blockDef();
      c.getOtherBlocks().add(b);
    }
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      b = blockDef();
      c.setFalseBlock(b);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public While whileDef() throws ParseException {
  While c = new While();
  IRValue r1;
    jj_consume_token(WHILE);
    r1 = rvalue();
    c.setCondition(r1);
    b = blockDef();
    c.setBlock(b);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Throw throwDef() throws ParseException {
  Throw c = new Throw();
  IRValue r1;
    jj_consume_token(THROW);
    r1 = rvalue();
    c.setValue(r1);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Break breakDef() throws ParseException {
  Token t;
    t = jj_consume_token(BREAK);
    {if (true) return new Break(t);}
    throw new Error("Missing return statement in function");
  }

  final public Continue continueDef() throws ParseException {
  Token t;
    t = jj_consume_token(CONTINUE);
    {if (true) return new Continue(t);}
    throw new Error("Missing return statement in function");
  }

  final public Repeat repeatDef() throws ParseException {
  Repeat c = new Repeat();
  IRValue r1;
    jj_consume_token(REPEAT);
    b = blockDef();
    c.setBlock(b);
    jj_consume_token(WHILE);
    r1 = rvalue();
    jj_consume_token(SEMICOMMA);
    c.setCondition(r1);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public For forDef() throws ParseException {
  For c = new For();
  Block b = new Block();
  IRValue r1;
  ICommand cmd;
  Token t;
    t = jj_consume_token(FOR);
    c.setToken(t);
    m.pushBlock(b);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case NOTNULL:
    case ID:
      d = declareDef();
      c.setDeclare(d);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOMMA);
    switch (jj_nt.kind) {
    case STRING:
    case BOOLEAN:
    case NEW:
    case THIS:
    case SUPER:
    case NULL:
    case SUB:
    case LPARAM:
    case NOT:
    case CONSTANT:
    case ID:
      r1 = rvalue();
      c.setCondition(r1);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOMMA);
    switch (jj_nt.kind) {
    case THIS:
    case ID:
      cmd = assignLDef();
      c.setIterator(cmd);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    jj_consume_token(LBLOCK);
    label_29:
    while (true) {
      switch (jj_nt.kind) {
      case STRING:
      case BOOLEAN:
      case BREAK:
      case CONTINUE:
      case NOTNULL:
      case IF:
      case WHILE:
      case FOR:
      case TRY:
      case NEW:
      case RETURN:
      case THIS:
      case SUPER:
      case NULL:
      case REPEAT:
      case THROW:
      case SUB:
      case LPARAM:
      case LBLOCK:
      case NOT:
      case CONSTANT:
      case ID:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_29;
      }
      cmd = commandDef();
      b.getCommands().add(cmd);
    }
    jj_consume_token(RBLOCK);
    m.popBlock();
    c.setBlock(b);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Try tryDef() throws ParseException {
  Token t;
  Try c = new Try();
  Block b;
  ICommand cmd;
  VariableDeclare vd;
    t = jj_consume_token(TRY);
    b = blockDef();
    c.setTryToken(t);
    c.setBlock(b);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_30;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPARAM);
      p = paramDef();
      jj_consume_token(RPARAM);
      b = new Block();
      m.pushBlock(b);
      vd = new VariableDeclare(p.getType(), p.getName());
      c.getCatchs().add(vd);
      this.m.addDeclare(vd);
      jj_consume_token(LBLOCK);
      label_31:
      while (true) {
        switch (jj_nt.kind) {
        case STRING:
        case BOOLEAN:
        case BREAK:
        case CONTINUE:
        case NOTNULL:
        case IF:
        case WHILE:
        case FOR:
        case TRY:
        case NEW:
        case RETURN:
        case THIS:
        case SUPER:
        case NULL:
        case REPEAT:
        case THROW:
        case SUB:
        case LPARAM:
        case LBLOCK:
        case NOT:
        case CONSTANT:
        case ID:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_31;
        }
        cmd = commandDef();
        b.getCommands().add(cmd);
      }
      jj_consume_token(RBLOCK);
      m.popBlock();
      c.getBlocks().add(b);
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Return returnDef() throws ParseException {
  Return c = new Return();
  Token t;
    t = jj_consume_token(RETURN);
    switch (jj_nt.kind) {
    case STRING:
    case BOOLEAN:
    case NEW:
    case THIS:
    case SUPER:
    case NULL:
    case SUB:
    case LPARAM:
    case NOT:
    case CONSTANT:
    case ID:
      rvalues(c.getValues());
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    c.setReturnToken(t);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Super superDef() throws ParseException {
  Super c = new Super();
  Token t;
    t = jj_consume_token(SUPER);
    c.setSuperToken(t);
    jj_consume_token(LPARAM);
    c.nextParams();
    switch (jj_nt.kind) {
    case STRING:
    case BOOLEAN:
    case NEW:
    case THIS:
    case SUPER:
    case NULL:
    case SUB:
    case LPARAM:
    case NOT:
    case CONSTANT:
    case ID:
      rvalues(c.getParams());
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOMMA:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_32;
      }
      jj_consume_token(SEMICOMMA);
      c.nextParams();
      switch (jj_nt.kind) {
      case STRING:
      case BOOLEAN:
      case NEW:
      case THIS:
      case SUPER:
      case NULL:
      case SUB:
      case LPARAM:
      case NOT:
      case CONSTANT:
      case ID:
        rvalues(c.getParams());
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    }
    jj_consume_token(RPARAM);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expDef() throws ParseException {
  IRValue r1;
    r1 = rvalue();
    {if (true) return new Expression(r1);}
    throw new Error("Missing return statement in function");
  }

  final public ILValue lvalue() throws ParseException {
  ILValue l1;
    switch (jj_nt.kind) {
    case ID:
      l1 = lidentify();
      break;
    case THIS:
      l1 = lthis();
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return l1;}
    throw new Error("Missing return statement in function");
  }

  final public ILValue lidentify() throws ParseException {
  ILValue l1;
    if (jj_2_13(2147483647)) {
      t = jj_consume_token(ID);
      l1 = new LIdentify(t);
    } else {
      switch (jj_nt.kind) {
      case ID:
        t = jj_consume_token(ID);
      l1 = new LSetIdentify(t);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch (jj_nt.kind) {
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(ID);
      l1 = new LSetField(l1, t);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    {if (true) return l1;}
    throw new Error("Missing return statement in function");
  }

  final public ILValue lthis() throws ParseException {
  ILValue l1;
    t = jj_consume_token(THIS);
    l1 = new LThis(t);
    jj_consume_token(DOT);
    t = jj_consume_token(ID);
    l1 = new LSetField(l1, t);
    {if (true) return l1;}
    throw new Error("Missing return statement in function");
  }

  final public void rvalues(List < IRValue > ls) throws ParseException {
  ILValue l1;
  IRValue r1;
    r1 = rvalue();
    ls.add(r1);
    label_33:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(COMMA);
      r1 = rvalue();
      ls.add(r1);
    }
  }

  final public IRValue rvalue() throws ParseException {
  IRValue r1;
    r1 = ternary();
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue ternary() throws ParseException {
  IRValue r1;
    r1 = or();
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue or() throws ParseException {
  IRValue r1, r2;
    r1 = equal();
    label_34:
    while (true) {
      switch (jj_nt.kind) {
      case OR:
      case AND:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_34;
      }
      switch (jj_nt.kind) {
      case OR:
        t = jj_consume_token(OR);
        r2 = equal();
      r1 = new Or(r1, r2, t);
        break;
      case AND:
        t = jj_consume_token(AND);
        r2 = equal();
      r1 = new And(r1, r2, t);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue equal() throws ParseException {
  IRValue l, r;
  Token t;
    l = sum();
    label_35:
    while (true) {
      switch (jj_nt.kind) {
      case EQUAL:
      case NOT:
      case HIGH:
      case LOW:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_35;
      }
      if (jj_2_15(2147483647)) {
        t = jj_consume_token(EQUAL);
        t = jj_consume_token(EQUAL);
        r = sum();
      l = new Equal(l, r, t);
      } else if (jj_2_16(2147483647)) {
        t = jj_consume_token(NOT);
        t = jj_consume_token(EQUAL);
        r = sum();
      l = new NotEqual(l, r, t);
      } else if (jj_2_17(2147483647)) {
        t = jj_consume_token(HIGH);
        t = jj_consume_token(EQUAL);
        r = sum();
      l = new HighEqual(l, r, t);
      } else if (jj_2_18(2147483647)) {
        t = jj_consume_token(HIGH);
        r = sum();
      l = new High(l, r, t);
      } else if (jj_2_19(2147483647)) {
        t = jj_consume_token(LOW);
        t = jj_consume_token(EQUAL);
        r = sum();
      l = new LowEqual(l, r, t);
      } else if (jj_2_20(2147483647)) {
        t = jj_consume_token(LOW);
        r = sum();
      l = new Low(l, r, t);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue sum() throws ParseException {
  IRValue l, r;
  Token t;
    l = mul();
    label_36:
    while (true) {
      switch (jj_nt.kind) {
      case SUM:
      case SUB:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_36;
      }
      switch (jj_nt.kind) {
      case SUM:
        t = jj_consume_token(SUM);
        r = mul();
      l = new Sum(l, r, t);
        break;
      case SUB:
        t = jj_consume_token(SUB);
        r = mul();
      l = new Sub(l, r, t);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue mul() throws ParseException {
  IRValue l, r;
  Token t;
    l = unary();
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_37;
      }
      switch (jj_nt.kind) {
      case MUL:
        t = jj_consume_token(MUL);
        r = unary();
      l = new Mul(l, r, t);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        r = unary();
      l = new Div(l, r, t);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue unary() throws ParseException {
  IRValue r1;
  BType tp = null;
  Token tn = null, nnt = null, ts = null;
    if (jj_2_21(2147483647)) {
      jj_consume_token(LPARAM);
      switch (jj_nt.kind) {
      case NOTNULL:
        nnt = jj_consume_token(NOTNULL);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      tp = typeDef();
      tp.setNotNull(nnt != null);
      jj_consume_token(RPARAM);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case SUB:
    case NOT:
      switch (jj_nt.kind) {
      case NOT:
        tn = jj_consume_token(NOT);
        break;
      case SUB:
        ts = jj_consume_token(SUB);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    r1 = literal();
    label_38:
    while (true) {
      if (jj_2_22(2147483647)) {
        ;
      } else {
        break label_38;
      }
      r1 = ridsDef(r1);
    }
    if (tn != null) r1 = new Not(r1, tn);
    if (ts != null) r1 = new Mul(r1, new RNumber(TokenUtil.newInstance("-1")), tn);
    if (tp != null)
    {
      {if (true) return new Cast(tp, r1);}
    }
    else
    {
      {if (true) return r1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public IRValue literal() throws ParseException {
  IRValue r1;
  Token tt = null;
    switch (jj_nt.kind) {
    case LPARAM:
      jj_consume_token(LPARAM);
      r1 = rvalue();
      jj_consume_token(RPARAM);
      break;
    case NULL:
      t = jj_consume_token(NULL);
      r1 = new RNull(t);
      break;
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
      r1 = new RNumber(t);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      r1 = new RString(t);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      r1 = new RBoolean(t);
      break;
    case NEW:
      r1 = newDef();
      break;
    default:
      jj_la1[100] = jj_gen;
      if (jj_2_23(2147483647)) {
        r1 = assignRDef();
      } else {
        switch (jj_nt.kind) {
        case THIS:
          r1 = rthisDef();
          break;
        case SUPER:
          r1 = rsuperDef();
          break;
        case ID:
          r1 = ridDef();
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue rthisDef() throws ParseException {
  IRValue r1;
  Token t;
    t = jj_consume_token(THIS);
    r1 = new RThis(t);
    if (jj_2_24(2147483647) && (getToken(3).kind != LPARAM)) {
      jj_consume_token(DOT);
      t = jj_consume_token(ID);
      r1 = new RGetField(r1, t);
    } else {
      ;
    }
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue rsuperDef() throws ParseException {
  Token t;
    t = jj_consume_token(SUPER);
    {if (true) return new RSuper(t);}
    throw new Error("Missing return statement in function");
  }

  final public IRValue ridDef() throws ParseException {
  IRValue r1;
    t = jj_consume_token(ID);
    r1 = new RIdentify(t);
    if (jj_2_25(2147483647) && (getToken(3).kind != LPARAM)) {
      jj_consume_token(DOT);
      t = jj_consume_token(ID);
      r1 = new RGetField(r1, t);
    } else {
      ;
    }
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue ridsDef(IRValue r2) throws ParseException {
  IRValue r1;
    jj_consume_token(DOT);
    t = jj_consume_token(ID);
    r1 = new Call(r2, t);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case STRING:
    case BOOLEAN:
    case NEW:
    case THIS:
    case SUPER:
    case NULL:
    case SUB:
    case LPARAM:
    case NOT:
    case CONSTANT:
    case ID:
      rvalues((
              (Call) r1
            )
            .getParams());
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    switch (jj_nt.kind) {
    case LARRAY:
      jj_consume_token(LARRAY);
      t = jj_consume_token(NATURAL);
      jj_consume_token(RARRAY);
      r1 = new Array(r1, new RNumber(t));
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    {if (true) return r1;}
    throw new Error("Missing return statement in function");
  }

  final public IRValue newDef() throws ParseException {
  New c = new New();
  Token t;
  BType tp;
    jj_consume_token(NEW);
    tp = typeDef();
    c.setType(tp);
    jj_consume_token(LPARAM);
    switch (jj_nt.kind) {
    case STRING:
    case BOOLEAN:
    case NEW:
    case THIS:
    case SUPER:
    case NULL:
    case SUB:
    case LPARAM:
    case NOT:
    case CONSTANT:
    case ID:
      rvalues(c.getParams());
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    jj_consume_token(RPARAM);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Token id() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token ids() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    tokens.add(t);
    label_39:
    while (true) {
      switch (jj_nt.kind) {
      case DOT:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_39;
      }
      t = jj_consume_token(DOT);
      tokens.add(t);
      t = jj_consume_token(ID);
      tokens.add(t);
    }
    Token result = BTokenUtil.join(tokens);
    tokens.clear();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Token importDef() throws ParseException {
  Token t;
    jj_consume_token(IMPORT);
    t = jj_consume_token(ID);
    tokens.add(t);
    label_40:
    while (true) {
      switch (jj_nt.kind) {
      case DOT:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_40;
      }
      t = jj_consume_token(DOT);
      tokens.add(t);
      switch (jj_nt.kind) {
      case ID:
        t = jj_consume_token(ID);
        tokens.add(t);
        break;
      case MUL:
        t = jj_consume_token(MUL);
        tokens.add(t);
        jj_consume_token(SEMICOMMA);
        Token result = BTokenUtil.join(tokens);
        tokens.clear();
        {if (true) return result;}
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOMMA);
    Token result = BTokenUtil.join(tokens);
    tokens.clear();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public BAccess access() throws ParseException {
    switch (jj_nt.kind) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      {if (true) return BAccess.PUBLIC;}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      {if (true) return BAccess.PROTECTED;}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      {if (true) return BAccess.PRIVATE;}
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LOW)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LOW)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_scan_token(RPARAM)) return true;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(HIGH)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(LOW)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(LPARAM)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(HIGH)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LOW)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(HIGH)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(HIGH)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LOW)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(HIGH)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARAM)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(LPARAM)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPARAM)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARAM)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LPARAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPARAM)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LPARAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPARAM)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOMMA)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_scan_token(PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(LPARAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(RPARAM)) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARAM)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOMMA)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    if (jj_scan_token(PROPERTY)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(SUM)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(LARRAY)) return true;
    if (jj_scan_token(NATURAL)) return true;
    if (jj_scan_token(RARRAY)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[109];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x40000,0x0,0x2080000,0x2080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x4000000,0x200000,0x4000000,0x3280000,0x3280000,0x4000000,0x4000000,0x0,0x4000000,0x4100000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x4000000,0x0,0x4000000,0x4100000,0x0,0x4000000,0x0,0x0,0x1000000,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0xbcc03000,0xb8000000,0xc03000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x3000,0x0,0xbcc03000,0x0,0xbcc03000,0x3000,0x3000,0x0,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x3000,0x0,0x3000,0x0,0x3000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x100,0xe00,0xe00,0xe00,0xe00,0x2000000,0x0,0x0,0x0,0x0,0x0,0x80,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x8291c066,0x18004,0x82904062,0x0,0x20000000,0x0,0x780000,0x780000,0x0,0x780000,0x780000,0x8,0x10,0x0,0x80904062,0x20,0x8291c066,0x1,0x8291c066,0x80904062,0x80904062,0x0,0x80904062,0x20,0x0,0x40000000,0x3000,0x3000,0xa0000000,0x180000,0x180000,0x600000,0x600000,0x0,0x80100000,0x80100000,0x804002,0x60,0x80904062,0x8000000,0x80904062,0x40000000,0x40000000,0x200000,0xe00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x40,0x8,0x40,0x2,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x4,0x40,0x8,0x40,0x2,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x40,0x8,0x40,0x8,0x0,0x4,0x8,0x40,0x8,0x0,0x0,0x0,0x8,0x0,0x40,0x8,0x40,0x8,0x0,0x0,0x40,0x8,0x0,0x4,0x8,0x0,0x8,0x2,0x50,0x0,0x50,0x8,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x40,0x50,0x40,0x50,0x0,0x50,0x50,0x50,0x4,0x50,0x40,0x40,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x40,0x50,0x0,0x50,0x0,0x0,0x40,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[25];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 109; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 109; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 25; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
