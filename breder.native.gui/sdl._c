#include <bni.h>
#include <SDL/SDL.h>
#include <SDL/SDL_opengl.h>

typedef struct b_bni_frame_t b_bni_frame_t;
struct b_bni_frame_t {
	SDL_Surface* id;
	char* keys;
	char* specialkeys;
};

static b_vm_t* vm;
static int inited = 0;
static b_arrayp_t* wins = 0;

b_object_t* b_gui_oframe() {
	if (true) {
		return b_arrayp_get_typed(b_object_t, wins, 0);
	} else {
		//		int win = glutGetWindow();
		//		int n, size = b_array_size(wins);
		//		for (n = 0; n < size; n++) {
		//			b_object_t* oframe = b_arrayp_get_typed(b_object_t, wins, n);
		//			b_bni_frame_t* data = b_bni_get_data(vm, oframe);
		//			if (data->id == win) {
		//				return oframe;
		//			}
		//		}
		//		return 0;
	}
}

void timer(int state) {
	//	b_object_t* oself = b_gui_oframe();
	//	b_bni_call_1_return_0_param_notnull(vm, ofps, oself,
	//			"(breder.lang.Number) getFramePerSecond ()");
	//	double fps = b_bni_onumber_to_primitive(vm, ofps);
	//	if (fps > 0) {
	//		glutPostRedisplay();
	//		glutTimerFunc(1000 / fps, timer, 0);
	//	} else {
	//		glutTimerFunc(1000, timer, 0);
	//	}
}

void display(void) {
	b_object_t* self = b_gui_oframe();
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	if (!b_bni_call_0_return_0_param(vm, self, "() paint ()")) {
		b_throw_print(vm, b_bni_get_throw(vm));
		b_bni_release_throw(vm);
	}
	SDL_GL_SwapBuffers();
}

void reshape(int w, int h) {
	b_object_t* self = b_gui_oframe();
	b_object_t* ow = b_bni_new_onumber(vm, w);
	b_object_t* oh = b_bni_new_onumber(vm, h);
	if (!b_bni_call_0_return_2_param(vm, self,
			"() setSize (breder.lang.Number,breder.lang.Number)", ow, oh))
		goto end;
	if (!b_bni_call_0_return_2_param(vm, self,
			"() reshape (breder.lang.Number,breder.lang.Number)", ow, oh))
		goto end;
	return;
	end: {
		b_throw_print(vm, b_bni_get_throw(vm));
		b_bni_release_throw(vm);
	}
}

void keyPress(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_new_onumber_define(vm, okey, key);
	b_bni_new_onumber_define(vm, ox, x);
	b_bni_new_onumber_define(vm, oy, y);
	if (!b_bni_call_0_return_3_param(
			vm,
			self,
			"() keyPress (breder.lang.Number,breder.lang.Number,breder.lang.Number)",
			okey, ox, oy))
		goto end;
	return;
	end: {
		b_throw_print(vm, b_bni_get_throw(vm));
		b_bni_release_throw(vm);
	}
}

void keyAsciiPress(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_frame_t* data = b_bni_get_data(vm, self);
	data->keys[key] = 1;
	keyPress(key, x, y);
}

void keySpecialPress(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_frame_t* data = b_bni_get_data(vm, self);
	data->specialkeys[key] = 1;
	keyPress(key, x, y);
}

void keyRelease(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_new_onumber_define(vm, okey, key);
	b_bni_new_onumber_define(vm, ox, x);
	b_bni_new_onumber_define(vm, oy, y);
	if (!b_bni_call_0_return_3_param(
			vm,
			self,
			"() keyRelease (breder.lang.Number,breder.lang.Number,breder.lang.Number)",
			okey, ox, oy))
		goto end;
	return;
	end: {
		b_throw_print(vm, b_bni_get_throw(vm));
		b_bni_release_throw(vm);
	}
}

void keyAsciiRelease(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_frame_t* data = b_bni_get_data(vm, self);
	data->keys[key] = 0;
	keyRelease(key, x, y);
}

void keySpecialRelease(int key, int x, int y) {
	b_object_t* self = b_gui_oframe();
	b_bni_frame_t* data = b_bni_get_data(vm, self);
	data->specialkeys[key] = 0;
	keyRelease(key, x, y);
}

void mouse(int button, int state, int x, int y) {
	b_bni_new_onumber_define(vm, obutton, button);
	b_bni_new_onumber_define(vm, ostate, state);
	b_bni_new_onumber_define(vm, ox, x);
	b_bni_new_onumber_define(vm, oy, y);
	b_bni_call_0_return_4_param(
			vm,
			b_gui_oframe(),
			"() mouse (breder.lang.Number,breder.lang.Number,breder.lang.Number,breder.lang.Number)",
			obutton, ostate, ox, oy);
}

void motion(int x, int y) {
	b_bni_new_onumber_define(vm, ox, x);
	b_bni_new_onumber_define(vm, oy, y);
	b_bni_call_0_return_2_param(vm, b_gui_oframe(),
			"() motion (breder.lang.Number,breder.lang.Number)", ox, oy);
}

void drag(int x, int y) {
	b_bni_new_onumber_define(vm, ox, x);
	b_bni_new_onumber_define(vm, oy, y);
	b_bni_call_0_return_2_param(vm, b_gui_oframe(),
			"() drag (breder.lang.Number,breder.lang.Number)", ox, oy);
}

static void b_bni_glut_close() {
	//	int win = glutGetWindow();
	//	int n, size = b_array_size(wins);
	//	for (n = 0; n < size; n++) {
	//		b_object_t* oframe = b_arrayp_get_typed(b_object_t, wins, n);
	//		int* cwin = b_bni_get_data(vm, oframe);
	//		if (*cwin == win) {
	//			b_array_remove(wins, n);
	//			b_object_used(oframe) -= 1;
	//		}
	//	}
	//	glutDestroyWindow(win);
	//	if (!b_array_size(wins)) {
	//		exit(0);
	//	}
}

void init(b_vm_t* _vm) {
	inited = 1;
	vm = _vm;
	wins = b_arrayp_new();
}

int breder_gui_Opengl$isKeyPressed$breder_gui_GlFrame$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_notnull(vm, oframe, 0);
	b_bni_get_param_int(vm, oindex, index, 1);
	b_bni_frame_t* data = b_bni_get_data(vm, oframe);
	int flag = data->keys[index] != 0;
	b_bni_new_oboolean_define(vm, okey, flag);
	return b_bni_set_return(vm, 0, okey);
}

int breder_gui_Opengl$isKeySpecialPressed$breder_gui_GlFrame$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_notnull(vm, oframe, 0);
	b_bni_get_param_int(vm, oindex, index, 1);
	b_bni_frame_t* data = b_bni_get_data(vm, oframe);
	int flag = data->specialkeys[index] != 0;
	b_bni_new_oboolean_define(vm, okey, flag);
	return b_bni_set_return(vm, 0, okey);
}

int breder_gui_Opengl$viewport$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ox, x, 0);
	b_bni_get_param_number(vm, oy, y, 1);
	b_bni_get_param_number(vm, ow, w, 2);
	b_bni_get_param_number(vm, oh, h, 3);
	glViewport(x, y, w, h);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$ortho2D$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, oleft, l, 0);
	b_bni_get_param_number(vm, oright, r, 1);
	b_bni_get_param_number(vm, obottom, b, 2);
	b_bni_get_param_number(vm, otop, t, 3);
	gluOrtho2D(l, r, b, t);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$perspective$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ofovy, fovy, 0);
	b_bni_get_param_number(vm, oaspect, aspect, 1);
	b_bni_get_param_number(vm, oznear, znear, 2);
	b_bni_get_param_number(vm, ozfar, zfar, 3);
	gluPerspective(fovy, aspect, znear, zfar);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$lookAt$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, oeyeX, eyeX, 0);
	b_bni_get_param_number(vm, oeyeY, eyeY, 1);
	b_bni_get_param_number(vm, oeyeZ, eyeZ, 2);
	b_bni_get_param_number(vm, ocenterX, centerX, 3);
	b_bni_get_param_number(vm, ocenterY, centerY, 4);
	b_bni_get_param_number(vm, ocenterZ, centerZ, 5);
	b_bni_get_param_number(vm, oupX, upX, 6);
	b_bni_get_param_number(vm, oupY, upY, 7);
	b_bni_get_param_number(vm, oupZ, upZ, 8);
	gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$loadIdentity(b_vm_t* vm) {
	glLoadIdentity();
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$matrixModeModelView(b_vm_t* vm) {
	glMatrixMode(GL_MODELVIEW);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$matrixModeProjection(b_vm_t* vm) {
	glMatrixMode(GL_PROJECTION);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$beginTriangle(b_vm_t* vm) {
	glBegin(GL_TRIANGLES);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$beginQuad(b_vm_t* vm) {
	glBegin(GL_QUADS);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$end(b_vm_t* vm) {
	glEnd();
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$push(b_vm_t* vm) {
	glPushMatrix();
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$pop(b_vm_t* vm) {
	glPopMatrix();
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$translate$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ox, x, 0);
	b_bni_get_param_number(vm, oy, y, 1);
	b_bni_get_param_number(vm, oz, z, 2);
	glTranslated(x, y, z);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$scale$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ox, x, 0);
	b_bni_get_param_number(vm, oy, y, 1);
	b_bni_get_param_number(vm, oz, z, 2);
	glScaled(x, y, z);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$rotate$breder_lang_Number$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, oa, a, 0);
	b_bni_get_param_number(vm, ox, x, 1);
	b_bni_get_param_number(vm, oy, y, 2);
	b_bni_get_param_number(vm, oz, z, 3);
	glRotated(a, x, y, z);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$vertex$breder_lang_Number$breder_lang_Number(b_vm_t* vm) {
	b_bni_get_param_number(vm, ox, x, 0);
	b_bni_get_param_number(vm, oy, y, 1);
	glVertex2d(x, y);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$vertex$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ox, x, 0);
	b_bni_get_param_number(vm, oy, y, 1);
	b_bni_get_param_number(vm, oz, z, 2);
	glVertex3d(x, y, z);
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$color$breder_lang_Number$breder_lang_Number$breder_lang_Number(
		b_vm_t* vm) {
	b_bni_get_param_number(vm, ored, red, 0);
	b_bni_get_param_number(vm, ogreen, green, 1);
	b_bni_get_param_number(vm, oblue, blue, 2);
	glColor3d(red, green, blue);
	return 1;
}

//int breder_gui_Opengl$writeStroke$breder_lang_String(b_vm_t* vm) {
//	b_bni_get_param_string(vm, otext, text, 0);
//	int n, size = b_bni_ostring_to_length(vm, otext);
//	glPushMatrix();
//	for (n = 0; n < size; n++) {
//		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *text++);
//	}
//	glPopMatrix();
//	return B_BNI_SUCCESS;
//}
//
//int breder_gui_Opengl$writeBitmap$breder_lang_String(b_vm_t* vm) {
//	b_bni_get_param_string(vm, otext, text, 0);
//	int n, size = b_bni_ostring_to_length(vm, otext);
//	for (n = 0; n < size; n++) {
//		glutStrokeCharacter(GLUT_STROKE_ROMAN, *text++);
//	}
//	return B_BNI_SUCCESS;
//}

int breder_gui_Opengl$start(b_vm_t* vm) {
	if (!inited) {
		init(vm);
	}
	SDL_Init(SDL_INIT_EVERYTHING);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
	int n, size = b_array_size(wins);
	for (n = 0; n < size; n++) {
		b_object_t* oframe = b_arrayp_get_typed(b_object_t, wins, n);
		b_bni_call_1_return_0_param_notnull(vm, owidth, oframe,
				"(breder.lang.Number) getWidth ()");
		b_bni_call_1_return_0_param_notnull(vm, oheight, oframe,
				"(breder.lang.Number) getHeight ()");
		b_bni_call_1_return_0_param_notnull(vm, otitle, oframe,
				"(breder.lang.String) getTitle ()");
		int width = b_bni_onumber_to_primitive(vm, owidth);
		int height = b_bni_onumber_to_primitive(vm, oheight);
		const char* title = b_bni_ostring_to_text(vm, otitle);
		SDL_Surface* win = SDL_SetVideoMode(width, height, 0, SDL_OPENGL);
		b_bni_frame_t* data = b_bni_get_data(vm, oframe);
		data->id = win;
		glClearColor(0.0, 0.0, 0.0, 1.0);
		{
			int done = false;
			while ((!done)) {
				SDL_Event event;
				display();
				while (SDL_PollEvent(&event)) {
					switch (event.type) {
					case SDL_USEREVENT:
						break;
					case SDL_KEYDOWN:
						break;
					case SDL_MOUSEBUTTONDOWN:
						break;
					case SDL_QUIT:
						done = true;
						break;

					default:
						break;
					}
				}
			}
		}
	}
	return B_BNI_SUCCESS;
}

int breder_gui_Opengl$show$breder_gui_GlFrame(b_vm_t* vm, b_object_t* self) {
	if (!inited) {
		init(vm);
	}
	b_object_t* oframe = b_bni_get_param(vm, 0);
	b_object_used(oframe) += 1;
	b_arrayp_add(wins, oframe);
	return B_BNI_SUCCESS;
}

int breder_gui_GlFrame$GlFrame(b_vm_t* vm, b_object_t* self) {
	b_bni_frame_t* data = calloc(1, sizeof(b_bni_frame_t));
	data->keys = calloc(256, sizeof(char));
	data->specialkeys = calloc(256, sizeof(char));
	{
		b_bni_new_onumber_define(vm, object, 640);
		b_bni_call_0_return_1_param(vm, self,
				"() setWidth (breder.lang.Number)", object);
	}
	{
		b_bni_new_onumber_define(vm, object, 480);
		b_bni_call_0_return_1_param(vm, self,
				"() setHeight (breder.lang.Number)", object);
	}
	{
		b_bni_new_ostring_define(vm, object, "noname");
		b_bni_call_0_return_1_param(vm, self,
				"() setTitle (breder.lang.String)", object);
	}
	b_bni_set_data(vm, self, data);
	return B_BNI_SUCCESS;
}

int breder_gui_glut_GlutFrame$finalize(b_vm_t* vm, b_object_t* self) {
	b_bni_frame_t* data = b_bni_get_data(vm, self);
	free(data->keys);
	free(data->specialkeys);
	free(data);
	return B_BNI_SUCCESS;
}
